<header>
  <h1>Parameterized Types</h1>
  <div class="intro">
    <p>
      Parameterized data types allow the developer to describe the type of data contained in a data structure. 
      Microstates supports two kinds of parameterized data types: <i>Array</i> and <i>Object</i>. These
      types can be parameterized with any other type.
    </p>
  </div>
</header>

<Section 
  @id="array"
  @title="Array<Number>"
  as |s|
>
  <s.notes>
    <p>Type argument describe the type of all elements in the array. This makes it possible to add new items to the array and Microstates will treat them as the argument type.</p>
    <p><strong>Transitions</strong>: 
      created microstate will have all transitions of an <a href="https://github.com/microstates/microstates.js/blob/master/src/types/array.js#L14">Array</a> type.
      Each element of the array will have its own transitions according to the argument type.
    </p>
    <p><strong>Definition</strong>: <a href="https://github.com/microstates/microstates.js/blob/master/src/types/array.js" target="_blank">Array</a></p>
  </s.notes>
  <s.demo>
    <s.live @class="mb-4">
      {{!BEGIN-SNIPPET array-of-numbers-template}}
      {{#let (state (type "array-of-numbers") (array 10 20 30)) as |numbers|}}
        <button {{action numbers.unshift 0}}>{{fa-icon "plus"}}</button>
        <ul>
          {{#each numbers as |number|}}
            <li>
              <button {{action number.decrement}}>{{fa-icon "caret-down"}}</button>
              <input 
                type="number" 
                value={{number.state}} 
                onchange={{action number.set value="target.value"}} 
              />
              <button {{action number.increment}}>{{fa-icon "caret-up"}}</button>
            </li>
          {{/each}}
        </ul>
        <button {{action numbers.push 0}}>{{fa-icon "plus"}}</button>
        <ValueBadge @value={{value-of numbers}} />
      {{/let}}
      {{!END-SNIPPET}}
    </s.live>
    <s.code>
      <h3 class="mb-2">Type</h3>
      <p>The only way to create a parameterized type is via JavaScript.</p>
      {{code-snippet name="array-of-numbers.js"}}
      <h3 class="mb-2 mt-4">Template</h3>
      {{code-snippet name="array-of-numbers-template.hbs"}}
    </s.code>
  </s.demo>
</Section>

<Section 
  @id="array-of-todomvc"
  @title="Array<TodoMVC>"
  as |s|
>
  <s.notes>
    <p>
      Once you define a type, it's very easy to combine into more complex types. You can for example turn a state into an array of states.
      Microstates is designed to make composing state as easy as composing components.
    </p>
    <p><strong>Transitions</strong>: 
      created microstate will have all transitions of an <a href="https://github.com/microstates/microstates.js/blob/master/src/types/array.js#L14">Array</a> type.
      Each element of the array will have its own transitions according to the argument type.
    </p>
    <p><strong>Definition</strong>: <a href="https://github.com/microstates/microstates.js/blob/master/src/types/array.js" target="_blank">Array</a></p>
  </s.notes>
  <s.demo>
    <s.live @class="mb-4">
      {{!BEGIN-SNIPPET array-of-todomvc-template}}
      {{#let (state (type "array-of-todomvc") todomvcInitial) as |lists|}}
        <button {{action lists.push}}>Add list</button>
        {{#each lists key="@index" as |list|}}
          <Todomvc @todomvc={{list}} />
        {{/each}}
        <ValueBadge @value={{value-of lists}} />
      {{/let}}
      {{!END-SNIPPET}}
    </s.live>
    <s.code>
      <h3 class="mb-2">Type</h3>
      <p>The only way to create a parameterized type is via JavaScript.</p>
      {{code-snippet name="array-of-todomvc.js"}}
      <h3 class="mb-2 mt-4">Template</h3>
      {{code-snippet name="array-of-todomvc-template.hbs"}}
    </s.code>
  </s.demo>
</Section>